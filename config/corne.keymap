/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        Q-Combo {
            bindings = <&kp Q>;
            key-positions = <7 8>;
            layers = <0>;
        };

        Z-Combo {
            bindings = <&kp Z>;
            key-positions = <8 9>;
            layers = <0>;
        };

        AtSign-Combo {
            bindings = <&kp AT_SIGN>;
            key-positions = <9 10>;
        };

        QuestionMark-Combo {
            bindings = <&kp QUESTION>;
            key-positions = <31 34>;
        };

        BackSlash-Combo {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <31 32>;
        };

        SemiColon-Combo {
            bindings = <&kp SEMICOLON>;
            key-positions = <32 33>;
        };

        Colon {
            bindings = <&kp COLON>;
            key-positions = <33 34>;
        };

        ExclamationMark-Combo {
            bindings = <&kp EXCLAMATION>;
            key-positions = <32 34>;
        };

        CapsLock-Combo {
            bindings = <&kp CAPS>;
            key-positions = <15 20>;
        };

        ToGamingLayer {
            bindings = <&to 4>;
            key-positions = <7 9 10>;
        };

        BackToHomeLayer {
            bindings = <&to 0>;
            key-positions = <38 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp V           &kp G           &kp M        &kp F        &kp DOUBLE_QUOTES    &kp SQT    &kp K            &kp U         &kp J           &kp HASH        &kp BSPC
&kp LCTRL  &mt LEFT_GUI R  &mt LEFT_ALT S  &mt LS(T) T  &mt LCTRL H  &kp P                &kp Y      &mt RS(RCTRL) I  &mt RS(E) E   &mt LEFT_ALT O  &mt LEFT_GUI A  &kp SQT
&kp LSHFT  &kp X           &kp C           &kp L        &kp D        &kp B                &kp MINUS  &kp W            &kp SLASH     &kp COMMA       &kp DOT         &kp ESC
                                           &mo 3        &kp N        &kp BACKSPACE        &to 1      &kp SPACE        &kp C_REPEAT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp ESCAPE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE       &kp CARET    &kp ASTERISK  &kp N7        &kp N8        &kp N9        &kp KP_DIVIDE  &kp BSPC
&bt BT_CLR  &kp TAB     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPERSAND  &kp TILDE    &kp PLUS      &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ENTER      &trans
&kp LSHFT   &trans      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT    &trans       &kp EQUAL     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans         &trans
                                              &trans                 &kp BACKSPACE  &to 0        &to 2         &trans        &kp N0
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp GRAVE  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp CARET        &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans     &trans          &trans           &kp AMPERSAND    &kp TILDE    &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans     &trans          &trans           &kp EXCLAMATION  &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                      &kp LGUI         &trans           &tog 0       &kp RET    &trans     &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &out OUT_BLE    &kp K_MUTE         &trans    &trans          &trans        &trans     &trans
&trans  &trans        &trans        &trans        &trans        &out OUT_USB    &kp C_VOLUME_UP    &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &kp C_VOLUME_DOWN  &trans    &trans          &trans        &trans     &trans
                                    &trans        &trans        &bt BT_CLR      &trans             &trans    &tog 0
            >;
        };

        layer_4 {
            bindings = <
&trans  &kp RA(TAB)     &kp Q  &kp W  &kp E   &kp R        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LCTRL       &kp A  &kp S  &kp D   &kp F        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_SHIFT  &kp Z  &kp X  &kp C   &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                               &kp B  &trans  &kp SPACE    &trans  &trans  &trans
            >;
        };
    };
};
